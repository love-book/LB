package models

import (
	"crypto/md5"
	"fmt"
	"github.com/astaxie/beego"
	"github.com/astaxie/beego/orm"
	_ "github.com/go-sql-driver/mysql"
	"net/url"
	"strings"
)


func init() {
	dbhost := beego.AppConfig.String("dbhost")
	dbport := beego.AppConfig.String("dbport")
	dbuser := beego.AppConfig.String("dbuser")
	dbpassword := beego.AppConfig.String("dbpassword")
	dbname := beego.AppConfig.String("dbname")
	if dbport == "" {
		dbport = "3306"
	}
	dburl := dbuser + ":" + dbpassword + "@tcp(" + dbhost + ":" + dbport + ")/" + dbname + "?charset=utf8"
	orm.RegisterDataBase("default", "mysql", dburl,30,30)
	/*
	beego必须注册一个别名为default的数据库，作为默认使用。
	orm.RegisterDataBase("default", "mysql", "test:123456@/test?charset=utf8",30,30)
	第一个参数是数据库的别名，用来切换数据库使用。
	第二个是driverName，在RegisterDriver时注册的
    第三是数据库连接字符串:test:123456@/test?charset=utf8相对于用户名:密码@数据库地址+名称?字符集
    第四个参数相当于:
	orm.SetMaxIdleConns("default", 30)
	设置数据库的最大空闲连接。
	第五个参数相当于：
	orm.SetMaxOpenConns("default", 30)
	设置数据库的最大数据库连接。
	第四个参数和第五个参数也可以不传值，会使用数据库默认值
	*/
	orm.RegisterModelWithPrefix("db_",new(User))
	if beego.AppConfig.String("runmode") == "dev" {
		orm.Debug = true
		// 自动建表
		//orm.RunSyncdb("default", false, true)
	}
	DbInit()
}


func Md5(buf []byte) string {
	hash := md5.New()
	hash.Write(buf)
	return fmt.Sprintf("%x", hash.Sum(nil))
}

func Rawurlencode(str string) string {
	return strings.Replace(url.QueryEscape(str), "+", "%20", -1)
}

//返回带前缀的表名
func TableName(str string) string {
	return fmt.Sprintf("%s%s", beego.AppConfig.String("dbprefix"), str)
}

func  Insert(m interface{}) error {
	if _, err := orm.NewOrm().Insert(m); err != nil {
		return err
	}
	return nil
}

func  Read(m interface{},fields ...string) error {
	if err := orm.NewOrm().Read(m, fields...); err != nil {
		return err
	}
	return nil
}

func  Update(m interface{},fields ...string) error {
	if _, err := orm.NewOrm().Update(m, fields...); err != nil {
		return err
	}
	return nil
}

func  Delete(m interface{}) error {
	if _, err := orm.NewOrm().Delete(m); err != nil {
		return err
	}
	return nil
}

func  Query(m interface{}) orm.QuerySeter {
	return orm.NewOrm().QueryTable(m)
}

func  DbInit(){
	var sqlMap map[string]string
	sqlMap = make(map[string]string)
	sqlMap["users"] = `
	create table if not exists lb_users
    (
		userid bigint(20) not null  comment '用户id',
		openid char(20) not null  default ''  comment 'openid',
		wnickname char(30) not null  default ''  comment '微信昵称',
		wimgurl char(150) not null  default ''  comment '微信头像',
		nickname char(30) not null  default ''  comment '用户名',
		imgurl char(100) not null  default ''  comment '头像',
		regtime int (11) not null  default '0'  comment '注册时间',
		gender char(1) not null  default '0' comment '性别',
		age   char(5) not null default '0'  comment '年龄',
		telphone int(11) null  default '0'  comment '电话',
		qq char(20) not null  default ''  comment 'QQ号',
		weino char(20) not null default '' comment '微博号',
		signature  char(150) not null default '' comment '签名',
		address char(255) not null default '' comment '地址',
		primary key (userid)
    )engine=InnoDB default charset=utf8 comment='用户表';
    `
	sqlMap["concern"] = `
	create table  if not exists lb_concern
	(
		userid bigint(20) not null,
		books json,
		primary key (userid)
	)engine=InnoDB default charset=utf8 comment='收藏表';
	`
	sqlMap["bookrack"] = `
	create table if not exists lb_bookrack
	(
		userid bigint(20) not null comment '用户id',
		books json comment 'bookid:图书编号,bookname:书名,author:作者,imgurl:书本组图,describe:简介,state:图书状态,flag:图书标签,create_time:上架时间',
		update_time int(11) not null default '0' comment '修改时间',
		primary key (userid)
	)engine=InnoDB default charset=utf8 comment='书架表';
	`
	sqlMap["books"] = `
	create table if not exists lb_books
	(
		bookid bigint(20) not null  comment '图书编号',
		bookname char(50) not null default ''  comment '书名',
		author char(20) not null default ''  comment '作者',
		imgurl char(150) not null default ''  comment '图书封面图',
		imgheadurl char(150) not null default ''  comment '图书正面图',
		imgbackurl char(150) not null default ''  comment '图书背面图',
		isbn char(18) not null default '',
		depreciation float(2) not null default '0.00',
		price float(4) not null default '0.00' comment '标价',
		describe  text  comment'图书简介',
		state tinyint(1) not null default '1' comment '状态',
		primary key (bookid)
	)engine=InnoDB default charset=utf8 comment='图书表';
	`
	sqlMap["bookorder"] = `
	create table if not exists lb_bookorder
	(
		orderid bigint(20) not null comment '订单编号',
		userid_from_confirm int(11) not null default '0'  comment '书主人编号',
		userid_to_confrim int(11) not null  default '0'  comment '借书人编号',
		books json comment 'bookid:图书编号,bookname:书名,author:作者,imgurl:书本组图,describe:简介,state:图书状态,flag:图书标签,create_time:上架时间',
		users json comment 'from:书主人信息,to:借阅者信息',
		order_state tyint(1) not null  default '0'  comment '状态1:接收2:拒绝,3:完成',
		primary key (orderid)
	)engine=InnoDB default charset=utf8 comment='订单表';
	`
	sqlMap["loginlog"] = `
	create table if not exists lb_loginlog
	(
		userid bigint(20) not null,
		logintime int (11) not null  default '0'  comment '登录时间',
		address char(255) not null default '' comment '实时地址信息',
		primary key (userid)
	)engine=InnoDB default charset=utf8 comment='登录时间表';
	`
	o := orm.NewOrm()
	for _,v := range sqlMap {
		res, err := o.Raw(v).Exec()
		if err == nil {
			num, _ := res.RowsAffected()
			fmt.Println("mysql row affected nums: ", num)
		}
	}

}