package controllers

import (
	"github.com/astaxie/beego"
	"github.com/garyburd/redigo/redis"
	"app/models"
	"fmt"
	"strings"
)

type ApiController struct {
	apiBaseController
}

func (this *ApiController) Prepare() {
	//关闭xsrf校验
	this.EnableXSRF = false
	//关闭模版渲染
	this.EnableRender = false
}

func (this *ApiController) Redis(){
	// 从配置文件获取redis配置并连接
	host := beego.AppConfig.String("redis_host")
	db, _ := beego.AppConfig.Int("redis_db")
	port := beego.AppConfig.String("redis_port")
	// tcp连接redis
	rs, err := redis.Dial("tcp", host+":"+port)
	// 操作完后自动关闭
	defer rs.Close()
	// 若连接出错，则打印错误信息，返回
	if err != nil {
		fmt.Println(err)
		fmt.Println("redis connect error")
		return
	}
	fmt.Println(rs)
	// 选择db
	rs.Do("SELECT", db)

	key := "aaa"
	value := "bbb"
	// 操作redis时调用Do方法，第一个参数传入操作名称（字符串），然后根据不同操作传入key、value、数字等
	// 返回2个参数，第一个为操作标识，成功则为1，失败则为0；第二个为错误信息
	n, err := rs.Do("SETNX", key, value)
	// 若操作失败则返回
	if err != nil {
		fmt.Println(err)
	}
	// 返回的n的类型是int64的，所以得将1或0转换成为int64类型的再比较
	if n == int64(1) {
		// 设置过期时间为24小时
		n, _ := rs.Do("EXPIRE", key, 60)
		if n == int64(1) {
			fmt.Println("success")
		}
	} else if n == int64(0) {
		fmt.Println("the key has already existed")
	}
	var Json struct{
		Code int
		Msg string
		Data [2]string
	}
	Json.Code =0
	Json.Msg  ="验证失败!"
	Json.Data[0] = "ok"
	Json.Data[1] = "kasoly"
	this.Data["data"] = &Json
	this.renderJson()
}

func (this *ApiController) Index() {
	token  :=  beego.AppConfig.String("token") // 微信公众平台的Token
	appid  :=  beego.AppConfig.String("appid")  // 微信公众平台的AppID
	secret :=  beego.AppConfig.String("secret")  // 微信公众平台的AppSecret
	// 仅被动响应消息时可不填写appid、secret
	// 仅主动发送消息时可不填写token
	mp := models.New(token, appid, secret)
	// 检查请求是否有效
	// 仅主动发送消息时不用检查
	if !mp.Request.IsValid(this.Ctx.ResponseWriter, this.Ctx.Request) {
		return
	}
	fmt.Println("CreateContainer,RequestBody", string(this.Ctx.Input.RequestBody))
	// 文本消息
	if mp.Request.MsgType == models.MsgTypeText {
		// 回复消息
		mp.ReplyTextMsg(this.Ctx.ResponseWriter, "Hello, 世界")
	}
	// 图片消息
	if mp.Request.MsgType == models.MsgTypeImage {
		// 回复消息
		mp.ReplyTextMsg(this.Ctx.ResponseWriter, "图片消息")
	}

	//事件
	if mp.Request.MsgType == models.MsgTypeEvent{
		fmt.Print(mp.Request.Event)
		// 地理位置事件
		if mp.Request.Event == models.MsgTypeLocation {

		}
		// 关注事件
		if mp.Request.Event == models.EventSubscribe {
			mp.ReplyTextMsg(this.Ctx.ResponseWriter, "感谢关注恋书!")
		}
		// 取关事件
		if mp.Request.Event == models.EventSubscribe {

		}

		// 扫码提示事件scancode_waitmsg
		if mp.Request.Event == models.EventScanCodeWaitMsg {
			if(mp.Request.ScanCodeInfo.ScanType == models.ScanTypeBarcode){
				scanRes := strings.Split(mp.Request.ScanCodeInfo.ScanResult,",")
				res ,_:= models.GetBarcodeInfo(scanRes[1])
				if(res.Code != "10000"){
					mp.ReplyTextMsg(this.Ctx.ResponseWriter, res.Msg)
				}
				goodsName := res.Result.Showapi_res_body.GoodsName
				fmt.Printf(goodsName)
				if(goodsName == ""){
					mp.ReplyTextMsg(this.Ctx.ResponseWriter, "书名:"+goodsName)
				}else{
					mp.ReplyTextMsg(this.Ctx.ResponseWriter, "书名:"+goodsName)
				}
			}else {
				mp.ReplyTextMsg(this.Ctx.ResponseWriter, "暂不支持非条形码扫码!")
			}

		}
	}



}
